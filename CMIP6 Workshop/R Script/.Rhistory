library(here)
library(lubridate)
# Define constants
GCM_Name <- "CanESM5"
Station <- "DSM"
variables <- c("pr", "hurs", "tasmax", "tasmin", "sfcWind")
scenarios <- c("historical", "ssp126", "ssp245", "ssp370", "ssp585")
base_folder <- here("..", "Outputs folder", "bias corrected cmip6 csv")
observed_folder <- here("..", "Inputs Folder", "Observed_Climate_Variables")
# IPCC colors
ipcc_colors <- c(
"historical" = "#000000",
"ssp126"     = "#55A868",
"ssp245"     = "#4C72B0",
"ssp370"     = "#C44E52",
"ssp585"     = "#8172B2",
"Observed"   = "#FF2C2C"
)
# Observed file mapping
observed_files <- list(
pr = "pcp_mm.csv",
tasmax = "tmp_max_c.csv",
tasmin = "tmp_min_c.csv",
sfcWind = "wnd_mps.csv",
hurs = "hmd_percent.csv"
)
# Loop through each variable
for (variable in variables) {
cat(sprintf("\n---\nPlotting for variable: %s\n", variable))
all_data <- list()
for (scn in scenarios) {
pattern <- paste0("^", GCM_Name, "_", scn, "_RFcorrected_", variable, "_\\d{4}-\\d{4}\\.csv$")
var_folder <- file.path(base_folder, variable)
file_match <- list.files(var_folder, pattern = pattern, full.names = TRUE)
if (length(file_match) > 0) {
df <- read_csv(file_match[1], show_col_types = FALSE)
cat(sprintf("Reading data for scenario: %s from file: %s\n", scn, basename(file_match[1])))
if (Station %in% names(df)) {
df <- df %>%
select(Date, !!Station) %>%
mutate(
Date = as.Date(Date, format = "%d/%m/%Y"),
Scenario = scn
)
names(df)[2] <- "Value"
all_data[[scn]] <- df
} else {
message(paste("Station", Station, "not found in", scn, "data for variable", variable, "- skipping..."))
}
} else {
message(paste("File not found for", variable, scn, "- skipping..."))
}
}
# Process observed data
obs_path <- file.path(observed_folder, observed_files[[variable]])
if (file.exists(obs_path)) {
obs_df <- read_csv(obs_path, show_col_types = FALSE) %>%
select(Date, all_of(Station)) %>%
rename(Value = all_of(Station)) %>%
mutate(Date = as.Date(Date, format = "%d/%m/%Y")) %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
summarize(
Value = if (variable == "pr") sum(Value, na.rm = TRUE) else mean(Value, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(Date = as.Date(paste0(Year, "-01-01")),
Scenario = "Observed")
} else {
message(paste("Observed file for", variable, "not found."))
obs_df <- NULL
}
# Combine and plot
if (length(all_data) > 0) {
combined_df <- bind_rows(all_data) %>%
mutate(Year = year(Date)) %>%
group_by(Year, Scenario) %>%
summarize(
Value = if (variable == "pr") sum(Value, na.rm = TRUE) else mean(Value, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(Date = as.Date(paste0(Year, "-01-01")))
# Add observed data
if (!is.null(obs_df)) {
combined_df <- bind_rows(combined_df, obs_df)
}
y_label <- if (variable == "pr") "Precipitation (mm/year)" else paste(variable, "(bias-corrected)")
#p <- ggplot(combined_df, aes(x = Date, y = Value, color = Scenario)) +
#geom_smooth(se = FALSE, method = "loess", span = 0.1, size = 1) +
#scale_color_manual(values = ipcc_colors) +
#labs(
#  title = paste("Timeseries for", variable, "at", Station, "-", GCM_Name),
#  x = "Date", y = y_label,
#  color = "Scenario"
#) +
#theme_minimal()
p <- ggplot(combined_df, aes(x = Date, y = Value, color = Scenario, linetype = Scenario)) +
geom_line(size = 1)+
#geom_smooth(se = FALSE, method = "loess", span = 0.1, size = 1) +
scale_color_manual(values = ipcc_colors) +
scale_linetype_manual(values = c(
"Observed" = "dotted",
"historical" = "solid",
"ssp126" = "solid",
"ssp245" = "solid",
"ssp370" = "solid",
"ssp585" = "solid"
)) +
labs(
title = paste("Timeseries for", variable, "at", Station, "-", GCM_Name),
x = "Date", y = y_label,
color = "Scenario", linetype = "Scenario"
) +
theme_minimal()
print(p)
} else {
cat(sprintf("No data available for variable: %s\n", variable))
}
}
# Load necessary libraries
library(fs)     # for file operations
library(here)   # for cleaner paths
# Define source and destination directories
source_dir <- here("..", "Outputs folder")
dest_dir   <- here("..", "Previous Outputs folder")
# Create destination folder if it doesn't exist
if (!dir_exists(dest_dir)) {
dir_create(dest_dir)
}
# Get all files recursively from source directory
files_to_move <- dir_ls(source_dir, recurse = TRUE, type = "file")
# Move files to the destination directory
for (file in files_to_move) {
# Get relative path to keep folder structure (optional)
rel_path <- path_rel(file, start = source_dir)
new_path <- path(dest_dir, rel_path)
# Create destination subdirectory if it doesn't exist
dir_create(path_dir(new_path))
# Move the file
file_move(file, new_path)
cat("Moved:", file, "->", new_path, "\n")
}
# Load necessary libraries
library(fs)     # for file operations
library(here)   # for cleaner paths
# Define source and destination directories
source_dir <- here("..", "Outputs folder")
dest_dir   <- here("..", "Previous Outputs folder")
# Create destination folder if it doesn't exist
if (!dir_exists(dest_dir)) {
dir_create(dest_dir)
}
# Get all files recursively from source directory
files_to_move <- dir_ls(source_dir, recurse = TRUE, type = "file")
# Move files to the destination directory
for (file in files_to_move) {
# Get relative path to keep folder structure (optional)
rel_path <- path_rel(file, start = source_dir)
new_path <- path(dest_dir, rel_path)
# Create destination subdirectory if it doesn't exist
dir_create(path_dir(new_path))
# Move the file
file_move(file, new_path)
#cat("Moved:", file, "->", new_path, "\n")
}
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(fs)     # for file operations
library(here)   # for cleaner paths
# Define source and destination directories
source_dir <- here("..", "Outputs folder")
dest_dir   <- here("..", "Previous Outputs folder")
# Create destination folder if it doesn't exist
if (!dir_exists(dest_dir)) {
dir_create(dest_dir)
}
# Get all files recursively from source directory
files_to_move <- dir_ls(source_dir, recurse = TRUE, type = "file")
# Load necessary libraries
library(fs)     # for file operations
library(here)   # for cleaner paths
# Define source and destination directories
source_dir <- here("..", "Outputs folder")
dest_dir   <- here("..", "Previous Outputs folder")
# Create destination folder if it doesn't exist
if (!dir_exists(dest_dir)) {
dir_create(dest_dir)
}
# Get all files recursively from source directory
files_to_move <- dir_ls(source_dir, recurse = TRUE, type = "file")
print(here::here())
# Load libraries
library(ggplot2)
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(here)
library(lubridate)
# Define constants
GCM_Name <- "CanESM5"
Station <- "DSM"
variables <- c("pr", "hurs", "tasmax", "tasmin", "sfcWind")
scenarios <- c("historical", "ssp126", "ssp245", "ssp370", "ssp585")
base_folder <- here("..", "Outputs folder", "bias corrected cmip6 csv")
observed_folder <- here("..", "Inputs Folder", "Observed_Climate_Variables")
# IPCC colors
ipcc_colors <- c(
"historical" = "#000000",
"ssp126"     = "#55A868",
"ssp245"     = "#4C72B0",
"ssp370"     = "#C44E52",
"ssp585"     = "#8172B2",
"Observed"   = "#FF2C2C"
)
# Observed file mapping
observed_files <- list(
pr = "pcp_mm.csv",
tasmax = "tmp_max_c.csv",
tasmin = "tmp_min_c.csv",
sfcWind = "wnd_mps.csv",
hurs = "hmd_percent.csv"
)
# Loop through each variable
for (variable in variables) {
cat(sprintf("\n---\nPlotting for variable: %s\n", variable))
all_data <- list()
for (scn in scenarios) {
pattern <- paste0("^", GCM_Name, "_", scn, "_RFcorrected_", variable, "_\\d{4}-\\d{4}\\.csv$")
var_folder <- file.path(base_folder, variable)
file_match <- list.files(var_folder, pattern = pattern, full.names = TRUE)
if (length(file_match) > 0) {
df <- read_csv(file_match[1], show_col_types = FALSE)
cat(sprintf("Reading data for scenario: %s from file: %s\n", scn, basename(file_match[1])))
if (Station %in% names(df)) {
df <- df %>%
select(Date, !!Station) %>%
mutate(
Date = as.Date(Date, format = "%d/%m/%Y"),
Scenario = scn
)
names(df)[2] <- "Value"
all_data[[scn]] <- df
} else {
message(paste("Station", Station, "not found in", scn, "data for variable", variable, "- skipping..."))
}
} else {
message(paste("File not found for", variable, scn, "- skipping..."))
}
}
# Process observed data
obs_path <- file.path(observed_folder, observed_files[[variable]])
if (file.exists(obs_path)) {
obs_df <- read_csv(obs_path, show_col_types = FALSE) %>%
select(Date, all_of(Station)) %>%
rename(Value = all_of(Station)) %>%
mutate(Date = as.Date(Date, format = "%d/%m/%Y")) %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
summarize(
Value = if (variable == "pr") sum(Value, na.rm = TRUE) else mean(Value, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(Date = as.Date(paste0(Year, "-01-01")),
Scenario = "Observed")
} else {
message(paste("Observed file for", variable, "not found."))
obs_df <- NULL
}
# Combine and plot
if (length(all_data) > 0) {
combined_df <- bind_rows(all_data) %>%
mutate(Year = year(Date)) %>%
group_by(Year, Scenario) %>%
summarize(
Value = if (variable == "pr") sum(Value, na.rm = TRUE) else mean(Value, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(Date = as.Date(paste0(Year, "-01-01")))
# Add observed data
if (!is.null(obs_df)) {
combined_df <- bind_rows(combined_df, obs_df)
}
y_label <- if (variable == "pr") "Precipitation (mm/year)" else paste(variable, "(bias-corrected)")
#p <- ggplot(combined_df, aes(x = Date, y = Value, color = Scenario)) +
#geom_smooth(se = FALSE, method = "loess", span = 0.1, size = 1) +
#scale_color_manual(values = ipcc_colors) +
#labs(
#  title = paste("Timeseries for", variable, "at", Station, "-", GCM_Name),
#  x = "Date", y = y_label,
#  color = "Scenario"
#) +
#theme_minimal()
p <- ggplot(combined_df, aes(x = Date, y = Value, color = Scenario, linetype = Scenario)) +
geom_line(size = 1)+
#geom_smooth(se = FALSE, method = "loess", span = 0.1, size = 1) +
scale_color_manual(values = ipcc_colors) +
scale_linetype_manual(values = c(
"Observed" = "dotted",
"historical" = "solid",
"ssp126" = "solid",
"ssp245" = "solid",
"ssp370" = "solid",
"ssp585" = "solid"
)) +
labs(
title = paste("Timeseries for", variable, "at", Station, "-", GCM_Name),
x = "Date", y = y_label,
color = "Scenario", linetype = "Scenario"
) +
theme_minimal()
print(p)
} else {
cat(sprintf("No data available for variable: %s\n", variable))
}
}
print(here::here())
# Install needed packages (if not already)
if (!requireNamespace("usethis", quietly = TRUE)) {
install.packages("usethis")
}
if (!requireNamespace("this.path", quietly = TRUE)) {
install.packages("this.path")
}
library(this.path)
library(usethis)
# Get the directory where this script is saved
script_dir <- this.path::this.dir()
# Print for confirmation
cat("Script is located at:", script_dir, "\n")
# Create RStudio project in this directory
usethis::create_project(path = script_dir, open = FALSE)
cat("✅ RStudio Project (.Rproj) created successfully in:\n", script_dir )
print(here::here())
print(here::here())
# Load necessary libraries
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
if (!requireNamespace("this.path", quietly = TRUE)) install.packages("this.path")
library(here)
library(this.path)
# Dynamically find the current script location
script_path <- this.path::this.path()
script_dir  <- dirname(script_path)
# Print for verification
cat("📁 Script directory:", script_dir, "\n")
# Manually set here() root based on the script location
# We'll simulate i_am by setting a fake path relative to the new root
fake_relative_path <- file.path(basename(script_dir), basename(script_path))
setwd(script_dir)  # optional: set working dir for compatibility
here::i_am(fake_relative_path)
# Confirm
cat("📌 here() is now rooted at:\n", here::here(), "\n")
library(here)
library(this.path)
# Get full path to the currently running script
script_path <- this.path::this.path()
# Get the directory containing this script
script_dir <- dirname(script_path)
# Set the working directory to script folder (optional)
setwd(script_dir)
# Tell here() to treat this script's folder as the project root
here::i_am(basename(script_path))
# Confirm
cat("📌 here() is now rooted at:\n", here::here(), "\n")
# Load necessary libraries
library(fs)     # for file operations
library(here)   # for cleaner paths
# Define source and destination directories
source_dir <- here("..", "Outputs folder")
dest_dir   <- here("..", "Previous Outputs folder")
# Create destination folder if it doesn't exist
if (!dir_exists(dest_dir)) {
dir_create(dest_dir)
}
# Get all files recursively from source directory
files_to_move <- dir_ls(source_dir, recurse = TRUE, type = "file")
# Move files to the destination directory
for (file in files_to_move) {
# Get relative path to keep folder structure (optional)
rel_path <- path_rel(file, start = source_dir)
new_path <- path(dest_dir, rel_path)
# Create destination subdirectory if it doesn't exist
dir_create(path_dir(new_path))
# Move the file
file_move(file, new_path)
#cat("Moved:", file, "->", new_path, "\n")
}
# Load libraries
library(ggplot2)
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(here)
library(lubridate)
# Define constants
GCM_Name <- "CanESM5"
Station <- "DSM"
variables <- c("pr", "hurs", "tasmax", "tasmin", "sfcWind")
scenarios <- c("historical", "ssp126", "ssp245", "ssp370", "ssp585")
base_folder <- here("..", "Outputs folder", "bias corrected cmip6 csv")
observed_folder <- here("..", "Inputs Folder", "Observed_Climate_Variables")
# IPCC colors
ipcc_colors <- c(
"historical" = "#000000",
"ssp126"     = "#55A868",
"ssp245"     = "#4C72B0",
"ssp370"     = "#C44E52",
"ssp585"     = "#8172B2",
"Observed"   = "#FF2C2C"
)
# Observed file mapping
observed_files <- list(
pr = "pcp_mm.csv",
tasmax = "tmp_max_c.csv",
tasmin = "tmp_min_c.csv",
sfcWind = "wnd_mps.csv",
hurs = "hmd_percent.csv"
)
# Loop through each variable
for (variable in variables) {
cat(sprintf("\n---\nPlotting for variable: %s\n", variable))
all_data <- list()
for (scn in scenarios) {
pattern <- paste0("^", GCM_Name, "_", scn, "_RFcorrected_", variable, "_\\d{4}-\\d{4}\\.csv$")
var_folder <- file.path(base_folder, variable)
file_match <- list.files(var_folder, pattern = pattern, full.names = TRUE)
if (length(file_match) > 0) {
df <- read_csv(file_match[1], show_col_types = FALSE)
cat(sprintf("Reading data for scenario: %s from file: %s\n", scn, basename(file_match[1])))
if (Station %in% names(df)) {
df <- df %>%
select(Date, !!Station) %>%
mutate(
Date = as.Date(Date, format = "%d/%m/%Y"),
Scenario = scn
)
names(df)[2] <- "Value"
all_data[[scn]] <- df
} else {
message(paste("Station", Station, "not found in", scn, "data for variable", variable, "- skipping..."))
}
} else {
message(paste("File not found for", variable, scn, "- skipping..."))
}
}
# Process observed data
obs_path <- file.path(observed_folder, observed_files[[variable]])
if (file.exists(obs_path)) {
obs_df <- read_csv(obs_path, show_col_types = FALSE) %>%
select(Date, all_of(Station)) %>%
rename(Value = all_of(Station)) %>%
mutate(Date = as.Date(Date, format = "%d/%m/%Y")) %>%
mutate(Year = year(Date)) %>%
group_by(Year) %>%
summarize(
Value = if (variable == "pr") sum(Value, na.rm = TRUE) else mean(Value, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(Date = as.Date(paste0(Year, "-01-01")),
Scenario = "Observed")
} else {
message(paste("Observed file for", variable, "not found."))
obs_df <- NULL
}
# Combine and plot
if (length(all_data) > 0) {
combined_df <- bind_rows(all_data) %>%
mutate(Year = year(Date)) %>%
group_by(Year, Scenario) %>%
summarize(
Value = if (variable == "pr") sum(Value, na.rm = TRUE) else mean(Value, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(Date = as.Date(paste0(Year, "-01-01")))
# Add observed data
if (!is.null(obs_df)) {
combined_df <- bind_rows(combined_df, obs_df)
}
y_label <- if (variable == "pr") "Precipitation (mm/year)" else paste(variable, "(bias-corrected)")
#p <- ggplot(combined_df, aes(x = Date, y = Value, color = Scenario)) +
#geom_smooth(se = FALSE, method = "loess", span = 0.1, size = 1) +
#scale_color_manual(values = ipcc_colors) +
#labs(
#  title = paste("Timeseries for", variable, "at", Station, "-", GCM_Name),
#  x = "Date", y = y_label,
#  color = "Scenario"
#) +
#theme_minimal()
p <- ggplot(combined_df, aes(x = Date, y = Value, color = Scenario, linetype = Scenario)) +
geom_line(size = 1)+
#geom_smooth(se = FALSE, method = "loess", span = 0.1, size = 1) +
scale_color_manual(values = ipcc_colors) +
scale_linetype_manual(values = c(
"Observed" = "dotted",
"historical" = "solid",
"ssp126" = "solid",
"ssp245" = "solid",
"ssp370" = "solid",
"ssp585" = "solid"
)) +
labs(
title = paste("Timeseries for", variable, "at", Station, "-", GCM_Name),
x = "Date", y = y_label,
color = "Scenario", linetype = "Scenario"
) +
theme_minimal()
print(p)
} else {
cat(sprintf("No data available for variable: %s\n", variable))
}
}
