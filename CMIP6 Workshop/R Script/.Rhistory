library(ggplot2)
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(here)
# Define constants
GCM_Name <- "CanESM5"
Station <- "DSM"
variables <- c("pr", "hurs", "tasmax", "tasmin", "sfcWind")
scenarios <- c("historical", "ssp126", "ssp245", "ssp370", "ssp585")
# Define base output directory
base_folder <- here("..", "Outputs folder", "bias corrected cmip6 csv")
# Loop through each variable
for (variable in variables) {
cat(sprintf("\n---\nPlotting for variable: %s\n", variable))
all_data <- list()
for (scn in scenarios) {
# Build file search pattern
pattern <- paste0("^", GCM_Name, "_", scn, "_RFcorrected_", variable, "_\\d{4}-\\d{4}\\.csv$")
# Search for the file within the variable folder
var_folder <- file.path(base_folder, variable)
file_match <- list.files(var_folder, pattern = pattern, full.names = TRUE)
if (length(file_match) > 0) {
df <- read_csv(file_match[1], show_col_types = FALSE)
if (Station %in% names(df)) {
df <- df %>%
select(Date, !!Station) %>%
mutate(Date = as.Date(Date),
Scenario = scn)
names(df)[2] <- "Value"
all_data[[scn]] <- df
} else {
message(paste("Station", Station, "not found in", scn, "data for variable", variable, "- skipping..."))
}
} else {
message(paste("File not found for", variable, scn, "- skipping..."))
}
}
# Combine and plot if data is available
if (length(all_data) > 0) {
combined_df <- bind_rows(all_data)
p <- ggplot(combined_df, aes(x = Date, y = Value, color = Scenario)) +
geom_line() +
labs(
title = paste("Timeseries for", variable, "at", Station, "-", GCM_Name),
x = "Date", y = paste(variable, "(bias-corrected)"),
color = "Scenario"
) +
theme_minimal()
print(p)
} else {
cat(sprintf("No data available for variable: %s\n", variable))
}
}
# Load libraries
library(ggplot2)
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(here)
# Define constants
GCM_Name <- "CanESM5"
Station <- "DSM"
variables <- c("pr", "hurs", "tasmax", "tasmin", "sfcWind")
scenarios <- c("historical", "ssp126", "ssp245", "ssp370", "ssp585")
# Define base output directory
base_folder <- here("..", "Outputs folder", "bias corrected cmip6 csv")
# Loop through each variable
for (variable in variables) {
cat(sprintf("\n---\nPlotting for variable: %s\n", variable))
all_data <- list()
for (scn in scenarios) {
# Build file search pattern
pattern <- paste0("^", GCM_Name, "_", scn, "_RFcorrected_", variable, "_\\d{4}-\\d{4}\\.csv$")
# Search for the file within the variable folder
var_folder <- file.path(base_folder, variable)
file_match <- list.files(var_folder, pattern = pattern, full.names = TRUE)
if (length(file_match) > 0) {
df <- read_csv(file_match[1], show_col_types = FALSE)
if (Station %in% names(df)) {
df <- df %>%
select(Date, !!Station) %>%
mutate(Date = as.Date(Date),
Scenario = scn)
names(df)[2] <- "Value"
all_data[[scn]] <- df
} else {
message(paste("Station", Station, "not found in", scn, "data for variable", variable, "- skipping..."))
}
} else {
message(paste("File not found for", variable, scn, "- skipping..."))
}
}
# Combine and plot if data is available
if (length(all_data) > 0) {
combined_df <- bind_rows(all_data)
p <- ggplot(combined_df, aes(x = Date, y = Value, color = Scenario)) +
geom_line() +
labs(
title = paste("Timeseries for", variable, "at", Station, "-", GCM_Name),
x = "Date", y = paste(variable, "(bias-corrected)"),
color = "Scenario"
) +
theme_minimal()
print(p)
} else {
cat(sprintf("No data available for variable: %s\n", variable))
}
}
# Load libraries
library(ggplot2)
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(here)
library(lubridate)  # For date handling
# Define constants
GCM_Name <- "CanESM5"
Station <- "DSM"
variables <- c("pr", "hurs", "tasmax", "tasmin", "sfcWind")
scenarios <- c("historical", "ssp126", "ssp245", "ssp370", "ssp585")
# Define base output directory
base_folder <- here("..", "Outputs folder", "bias corrected cmip6 csv")
# Loop through each variable
for (variable in variables) {
cat(sprintf("\n---\nPlotting for variable: %s\n", variable))
all_data <- list()
for (scn in scenarios) {
# Build file search pattern
pattern <- paste0("^", GCM_Name, "_", scn, "_RFcorrected_", variable, "_\\d{4}-\\d{4}\\.csv$")
# Search for the file within the variable folder
var_folder <- file.path(base_folder, variable)
file_match <- list.files(var_folder, pattern = pattern, full.names = TRUE)
if (length(file_match) > 0) {
df <- read_csv(file_match[1], show_col_types = FALSE)
cat(sprintf("Reading data for scenario: %s from file: %s\n", scn, basename(file_match[1])))
# Check if station exists in the data
if (Station %in% names(df)) {
# Debug: View date column before conversion
cat("First 5 entries in Date column before conversion:\n")
print(head(df$Date))
print(str(df$Date))
# Convert Date properly â€” modify format if needed
df <- df %>%
select(Date, !!Station) %>%
mutate(
Date = as.Date(Date, format = "%Y-%m-%d"),  # Adjust format if needed
Scenario = scn
)
# Debug: View converted Date
cat("First 5 converted Date entries:\n")
print(head(df$Date))
print(summary(df$Date))
names(df)[2] <- "Value"
all_data[[scn]] <- df
} else {
message(paste("Station", Station, "not found in", scn, "data for variable", variable, "- skipping..."))
}
} else {
message(paste("File not found for", variable, scn, "- skipping..."))
}
}
# Combine and plot if data is available
if (length(all_data) > 0) {
combined_df <- bind_rows(all_data)
# Optional: Uncomment to aggregate to yearly averages for clearer trends
# combined_df <- combined_df %>%
#   mutate(Year = year(Date)) %>%
#   group_by(Year, Scenario) %>%
#   summarize(Value = mean(Value, na.rm = TRUE)) %>%
#   mutate(Date = as.Date(paste0(Year, "-01-01")))
# Plot
p <- ggplot(combined_df, aes(x = Date, y = Value, color = Scenario)) +
geom_line(alpha = 0.6) +  # Add transparency for visibility
# geom_smooth(se = FALSE, method = "loess", span = 0.1) +  # Optional smoothing line
labs(
title = paste("Timeseries for", variable, "at", Station, "-", GCM_Name),
x = "Date", y = paste(variable, "(bias-corrected)"),
color = "Scenario"
) +
theme_minimal()
print(p)
} else {
cat(sprintf("No data available for variable: %s\n", variable))
}
}
# Load libraries
library(ggplot2)
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(here)
library(lubridate)  # For date handling
# Define constants
GCM_Name <- "CanESM5"
Station <- "DSM"
variables <- c("pr", "hurs", "tasmax", "tasmin", "sfcWind")
scenarios <- c("historical", "ssp126", "ssp245", "ssp370", "ssp585")
# Define base output directory
base_folder <- here("..", "Outputs folder", "bias corrected cmip6 csv")
# Loop through each variable
for (variable in variables) {
cat(sprintf("\n---\nPlotting for variable: %s\n", variable))
all_data <- list()
for (scn in scenarios) {
# Build file search pattern
pattern <- paste0("^", GCM_Name, "_", scn, "_RFcorrected_", variable, "_\\d{4}-\\d{4}\\.csv$")
# Search for the file within the variable folder
var_folder <- file.path(base_folder, variable)
file_match <- list.files(var_folder, pattern = pattern, full.names = TRUE)
if (length(file_match) > 0) {
df <- read_csv(file_match[1], show_col_types = FALSE)
cat(sprintf("Reading data for scenario: %s from file: %s\n", scn, basename(file_match[1])))
if (Station %in% names(df)) {
# Debug: View date column before conversion
cat("First 5 entries in Date column before conversion:\n")
print(head(df$Date))
print(str(df$Date))
# Correct Date parsing using the format "DD/MM/YYYY"
df <- df %>%
select(Date, !!Station) %>%
mutate(
Date = as.Date(Date, format = "%d/%m/%Y"),
Scenario = scn
)
# Debug: View converted Date
cat("First 5 converted Date entries:\n")
print(head(df$Date))
print(summary(df$Date))
names(df)[2] <- "Value"
all_data[[scn]] <- df
} else {
message(paste("Station", Station, "not found in", scn, "data for variable", variable, "- skipping..."))
}
} else {
message(paste("File not found for", variable, scn, "- skipping..."))
}
}
# Combine and plot if data is available
if (length(all_data) > 0) {
combined_df <- bind_rows(all_data)
# Aggregate to yearly averages
combined_df <- combined_df %>%
mutate(Year = year(Date)) %>%
group_by(Year, Scenario) %>%
summarize(Value = mean(Value, na.rm = TRUE), .groups = "drop") %>%
mutate(Date = as.Date(paste0(Year, "-01-01")))
# Plot
p <- ggplot(combined_df, aes(x = Date, y = Value, color = Scenario)) +
geom_line(alpha = 0.6) +
geom_smooth(se = FALSE, method = "loess", span = 0.1) +
labs(
title = paste("Timeseries for", variable, "at", Station, "-", GCM_Name),
x = "Date", y = paste(variable, "(bias-corrected)"),
color = "Scenario"
) +
theme_minimal()
print(p)
} else {
cat(sprintf("No data available for variable: %s\n", variable))
}
}
# Load libraries
library(ggplot2)
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(here)
library(lubridate)  # For date handling
# Define constants
GCM_Name <- "CanESM5"
Station <- "DSM"
variables <- c("pr", "hurs", "tasmax", "tasmin", "sfcWind")
scenarios <- c("historical", "ssp126", "ssp245", "ssp370", "ssp585")
# Define base output directory
base_folder <- here("..", "Outputs folder", "bias corrected cmip6 csv")
# Loop through each variable
for (variable in variables) {
cat(sprintf("\n---\nPlotting for variable: %s\n", variable))
all_data <- list()
for (scn in scenarios) {
# Build file search pattern
pattern <- paste0("^", GCM_Name, "_", scn, "_RFcorrected_", variable, "_\\d{4}-\\d{4}\\.csv$")
# Search for the file within the variable folder
var_folder <- file.path(base_folder, variable)
file_match <- list.files(var_folder, pattern = pattern, full.names = TRUE)
if (length(file_match) > 0) {
df <- read_csv(file_match[1], show_col_types = FALSE)
cat(sprintf("Reading data for scenario: %s from file: %s\n", scn, basename(file_match[1])))
if (Station %in% names(df)) {
# Debug: View date column before conversion
cat("First 5 entries in Date column before conversion:\n")
print(head(df$Date))
print(str(df$Date))
# Convert Date using the correct format
df <- df %>%
select(Date, !!Station) %>%
mutate(
Date = as.Date(Date, format = "%d/%m/%Y"),
Scenario = scn
)
# Debug: View converted Date
cat("First 5 converted Date entries:\n")
print(head(df$Date))
print(summary(df$Date))
names(df)[2] <- "Value"
all_data[[scn]] <- df
} else {
message(paste("Station", Station, "not found in", scn, "data for variable", variable, "- skipping..."))
}
} else {
message(paste("File not found for", variable, scn, "- skipping..."))
}
}
# Combine and plot if data is available
if (length(all_data) > 0) {
combined_df <- bind_rows(all_data)
# Aggregate: sum for pr, mean for others
combined_df <- combined_df %>%
mutate(Year = year(Date)) %>%
group_by(Year, Scenario) %>%
summarize(
Value = if (variable == "pr") sum(Value, na.rm = TRUE) else mean(Value, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(Date = as.Date(paste0(Year, "-01-01")))
# Dynamic y-axis label
y_label <- if (variable == "pr") "Precipitation (mm/year)" else paste(variable, "(bias-corrected)")
# Plot
p <- ggplot(combined_df, aes(x = Date, y = Value, color = Scenario)) +
geom_line(alpha = 0.6) +
geom_smooth(se = FALSE, method = "loess", span = 0.1) +
labs(
title = paste("Timeseries for", variable, "at", Station, "-", GCM_Name),
x = "Date", y = y_label,
color = "Scenario"
) +
theme_minimal()
print(p)
} else {
cat(sprintf("No data available for variable: %s\n", variable))
}
}
# Load libraries
library(ggplot2)
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(here)
library(lubridate)  # For date handling
# Define constants
GCM_Name <- "ACCESS-CM2"
Station <- "DSM"
variables <- c("pr", "hurs", "tasmax", "tasmin", "sfcWind")
scenarios <- c("historical", "ssp126", "ssp245", "ssp370", "ssp585")
# Define base output directory
base_folder <- here("..", "Outputs folder", "bias corrected cmip6 csv")
# Loop through each variable
for (variable in variables) {
cat(sprintf("\n---\nPlotting for variable: %s\n", variable))
all_data <- list()
for (scn in scenarios) {
# Build file search pattern
pattern <- paste0("^", GCM_Name, "_", scn, "_RFcorrected_", variable, "_\\d{4}-\\d{4}\\.csv$")
# Search for the file within the variable folder
var_folder <- file.path(base_folder, variable)
file_match <- list.files(var_folder, pattern = pattern, full.names = TRUE)
if (length(file_match) > 0) {
df <- read_csv(file_match[1], show_col_types = FALSE)
cat(sprintf("Reading data for scenario: %s from file: %s\n", scn, basename(file_match[1])))
if (Station %in% names(df)) {
# Debug: View date column before conversion
cat("First 5 entries in Date column before conversion:\n")
print(head(df$Date))
print(str(df$Date))
# Convert Date using the correct format
df <- df %>%
select(Date, !!Station) %>%
mutate(
Date = as.Date(Date, format = "%d/%m/%Y"),
Scenario = scn
)
# Debug: View converted Date
cat("First 5 converted Date entries:\n")
print(head(df$Date))
print(summary(df$Date))
names(df)[2] <- "Value"
all_data[[scn]] <- df
} else {
message(paste("Station", Station, "not found in", scn, "data for variable", variable, "- skipping..."))
}
} else {
message(paste("File not found for", variable, scn, "- skipping..."))
}
}
# Combine and plot if data is available
if (length(all_data) > 0) {
combined_df <- bind_rows(all_data)
# Aggregate: sum for pr, mean for others
combined_df <- combined_df %>%
mutate(Year = year(Date)) %>%
group_by(Year, Scenario) %>%
summarize(
Value = if (variable == "pr") sum(Value, na.rm = TRUE) else mean(Value, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(Date = as.Date(paste0(Year, "-01-01")))
# Dynamic y-axis label
y_label <- if (variable == "pr") "Precipitation (mm/year)" else paste(variable, "(bias-corrected)")
# Plot
p <- ggplot(combined_df, aes(x = Date, y = Value, color = Scenario)) +
geom_line(alpha = 0.6) +
geom_smooth(se = FALSE, method = "loess", span = 0.1) +
labs(
title = paste("Timeseries for", variable, "at", Station, "-", GCM_Name),
x = "Date", y = y_label,
color = "Scenario"
) +
theme_minimal()
print(p)
} else {
cat(sprintf("No data available for variable: %s\n", variable))
}
}
# Load libraries
library(ggplot2)
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(here)
library(lubridate)  # For date handling
# Define constants
GCM_Name <- "CanESM5" #"ACCESS-CM2"
Station <- "DSM"
variables <- c("pr", "hurs", "tasmax", "tasmin", "sfcWind")
scenarios <- c("historical", "ssp126", "ssp245", "ssp370", "ssp585")
# Define base output directory
base_folder <- here("..", "Outputs folder", "bias corrected cmip6 csv")
# Loop through each variable
for (variable in variables) {
cat(sprintf("\n---\nPlotting for variable: %s\n", variable))
all_data <- list()
for (scn in scenarios) {
# Build file search pattern
pattern <- paste0("^", GCM_Name, "_", scn, "_RFcorrected_", variable, "_\\d{4}-\\d{4}\\.csv$")
# Search for the file within the variable folder
var_folder <- file.path(base_folder, variable)
file_match <- list.files(var_folder, pattern = pattern, full.names = TRUE)
if (length(file_match) > 0) {
df <- read_csv(file_match[1], show_col_types = FALSE)
cat(sprintf("Reading data for scenario: %s from file: %s\n", scn, basename(file_match[1])))
if (Station %in% names(df)) {
# Debug: View date column before conversion
cat("First 5 entries in Date column before conversion:\n")
print(head(df$Date))
print(str(df$Date))
# Convert Date using the correct format
df <- df %>%
select(Date, !!Station) %>%
mutate(
Date = as.Date(Date, format = "%d/%m/%Y"),
Scenario = scn
)
# Debug: View converted Date
cat("First 5 converted Date entries:\n")
print(head(df$Date))
print(summary(df$Date))
names(df)[2] <- "Value"
all_data[[scn]] <- df
} else {
message(paste("Station", Station, "not found in", scn, "data for variable", variable, "- skipping..."))
}
} else {
message(paste("File not found for", variable, scn, "- skipping..."))
}
}
# Combine and plot if data is available
if (length(all_data) > 0) {
combined_df <- bind_rows(all_data)
# Aggregate: sum for pr, mean for others
combined_df <- combined_df %>%
mutate(Year = year(Date)) %>%
group_by(Year, Scenario) %>%
summarize(
Value = if (variable == "pr") sum(Value, na.rm = TRUE) else mean(Value, na.rm = TRUE),
.groups = "drop"
) %>%
mutate(Date = as.Date(paste0(Year, "-01-01")))
# Dynamic y-axis label
y_label <- if (variable == "pr") "Precipitation (mm/year)" else paste(variable, "(bias-corrected)")
# Plot
p <- ggplot(combined_df, aes(x = Date, y = Value, color = Scenario)) +
geom_line(alpha = 0.6) +
geom_smooth(se = FALSE, method = "loess", span = 0.1) +
labs(
title = paste("Timeseries for", variable, "at", Station, "-", GCM_Name),
x = "Date", y = y_label,
color = "Scenario"
) +
theme_minimal()
print(p)
} else {
cat(sprintf("No data available for variable: %s\n", variable))
}
}
